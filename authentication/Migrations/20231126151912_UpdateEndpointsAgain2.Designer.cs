// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using authentication.Data;

#nullable disable

namespace authentication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231126151912_UpdateEndpointsAgain2")]
    partial class UpdateEndpointsAgain2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "20bac131-c0fb-42c4-865e-3d70a976db46",
                            ConcurrencyStamp = "20bac131-c0fb-42c4-865e-3d70a976db46",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bf283151-00a3-47dd-894a-9ee86a2aa2eb",
                            ConcurrencyStamp = "bf283151-00a3-47dd-894a-9ee86a2aa2eb",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "58835548-56c8-48c0-95b7-252ac7c0c6a9",
                            RoleId = "20bac131-c0fb-42c4-865e-3d70a976db46"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("authentication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "58835548-56c8-48c0-95b7-252ac7c0c6a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "706e1e1e-cb5a-4d65-a510-f11c01a46d29",
                            Email = "mrandhawa40@my.bcit.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "MRANDHAWA40@MY.BCIT.CA",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMWcauzUHfo23fR7IAsHjvwTaJysC7YMYNI0MM9JC5BxHthVB9JGD5SDe1Y9vF0LYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc3a4c5b-144a-46cf-bc40-3dff3107dcb6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("authentication.Models.EndpointType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("RequestTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("EndpointTypes");

                    b.HasData(
                        new
                        {
                            Id = "7686d01a-ae17-4e1c-8754-191bd777e13e",
                            Name = "/api/v1/auth/register",
                            RequestTypeId = "c8ca8cbe-4f01-40ee-bd36-a32fe87daa65"
                        },
                        new
                        {
                            Id = "a260b1b2-f323-4768-9511-f2da26c1c7f9",
                            Name = "/api/v1/auth/login",
                            RequestTypeId = "c8ca8cbe-4f01-40ee-bd36-a32fe87daa65"
                        },
                        new
                        {
                            Id = "8bab9616-66fd-4445-8893-f2183fded108",
                            Name = "/api/v1/auth/validate",
                            RequestTypeId = "c8ca8cbe-4f01-40ee-bd36-a32fe87daa65"
                        },
                        new
                        {
                            Id = "f210bab9-9779-4229-9ad3-1093059d1665",
                            Name = "/api/v1/auth/refresh",
                            RequestTypeId = "c8ca8cbe-4f01-40ee-bd36-a32fe87daa65"
                        },
                        new
                        {
                            Id = "f989e13e-d793-4a73-8734-3d4b4ec6a695",
                            Name = "/api/v1/auth/revoke",
                            RequestTypeId = "fd1a1d5c-d515-472e-b4c4-49cee2e3774a"
                        },
                        new
                        {
                            Id = "fd1722cd-2974-49f7-aab2-1538606effd3",
                            Name = "/api/v1/auth/resetPassword/",
                            RequestTypeId = "5b230900-c7d5-4b64-a3be-7e899c70aea8"
                        },
                        new
                        {
                            Id = "6bdbbc95-d4a3-4590-8163-08f6087c47b0",
                            Name = "/api/v1/auth/resetPassword",
                            RequestTypeId = "12835f88-5094-4e55-ba59-4b86cb267b50"
                        },
                        new
                        {
                            Id = "b2298926-1602-414e-8f1b-78ac7642178a",
                            Name = "/api/v1/auth/userInformation/",
                            RequestTypeId = "5b230900-c7d5-4b64-a3be-7e899c70aea8"
                        },
                        new
                        {
                            Id = "05642e45-0542-4ef2-a464-7a84b1a893e5",
                            Name = "/api/v1/auth/allUserInformation",
                            RequestTypeId = "5b230900-c7d5-4b64-a3be-7e899c70aea8"
                        },
                        new
                        {
                            Id = "72c0827f-61a4-4ccf-a526-2e7c6c90b4b1",
                            Name = "/api/v1/auth/totalRequestsPerEndpoint",
                            RequestTypeId = "5b230900-c7d5-4b64-a3be-7e899c70aea8"
                        },
                        new
                        {
                            Id = "543ac586-1664-4a6c-8509-b9b8e7c82313",
                            Name = "/api/v1/auth/getAllEndpoints",
                            RequestTypeId = "5b230900-c7d5-4b64-a3be-7e899c70aea8"
                        });
                });

            modelBuilder.Entity("authentication.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtTokenId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("authentication.Models.RequestType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = "5b230900-c7d5-4b64-a3be-7e899c70aea8",
                            TypeName = "GET"
                        },
                        new
                        {
                            Id = "c8ca8cbe-4f01-40ee-bd36-a32fe87daa65",
                            TypeName = "POST"
                        },
                        new
                        {
                            Id = "12835f88-5094-4e55-ba59-4b86cb267b50",
                            TypeName = "PATCH"
                        },
                        new
                        {
                            Id = "fd1a1d5c-d515-472e-b4c4-49cee2e3774a",
                            TypeName = "DELETE"
                        });
                });

            modelBuilder.Entity("authentication.Models.UserEndpointRequests", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(0);

                    b.Property<string>("EndpointTypeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<int>("NumRequests")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EndpointTypeId");

                    b.HasIndex("EndpointTypeId");

                    b.ToTable("UserEndpointRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("authentication.Models.EndpointType", b =>
                {
                    b.HasOne("authentication.Models.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("authentication.Models.UserEndpointRequests", b =>
                {
                    b.HasOne("authentication.Models.EndpointType", "EndpointType")
                        .WithMany()
                        .HasForeignKey("EndpointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("authentication.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndpointType");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
