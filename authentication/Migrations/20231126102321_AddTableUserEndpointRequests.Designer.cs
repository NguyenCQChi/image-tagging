// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using authentication.Data;

#nullable disable

namespace authentication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231126102321_AddTableUserEndpointRequests")]
    partial class AddTableUserEndpointRequests
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "98193fe7-851b-413c-9bf4-77633f12087d",
                            ConcurrencyStamp = "98193fe7-851b-413c-9bf4-77633f12087d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "06606f4d-d4b9-45a5-958d-d26787bedae7",
                            ConcurrencyStamp = "06606f4d-d4b9-45a5-958d-d26787bedae7",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "64fa5799-ed15-4592-bc6e-7bfef99968b8",
                            RoleId = "98193fe7-851b-413c-9bf4-77633f12087d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("authentication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "64fa5799-ed15-4592-bc6e-7bfef99968b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75af60d9-3ee5-4004-9369-32a1d069a3f2",
                            Email = "mrandhawa40@my.bcit.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "MRANDHAWA40@MY.BCIT.CA",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIk8CPhtjfShvON0s7m4SnGM1wGn9KTiy8i2SQeW3njA8rtkqQXSC/tx+AwLSTAWCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b06ac49-9320-4374-8e16-d2a39ae6023e",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("authentication.Models.EndpointType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("RequestTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("EndpointTypes");

                    b.HasData(
                        new
                        {
                            Id = "849da0e0-6bca-4044-a1c8-7bf6f09c8de7",
                            Name = "/api/v1/health",
                            RequestTypeId = "088ad7c5-0de4-416a-bc0f-5e9d6ba7d7ca"
                        },
                        new
                        {
                            Id = "2a741ab7-70d8-493c-ac98-f54e3792878e",
                            Name = "/api/v1/auth/register",
                            RequestTypeId = "1341b0da-9ef7-4b98-9e55-5dbf66328ac9"
                        },
                        new
                        {
                            Id = "10697569-26db-4ade-a75d-679c71e56476",
                            Name = "/api/v1/auth/login",
                            RequestTypeId = "1341b0da-9ef7-4b98-9e55-5dbf66328ac9"
                        },
                        new
                        {
                            Id = "3f040644-db79-4b40-84e7-db7b54643561",
                            Name = "/api/v1/auth/validate",
                            RequestTypeId = "1341b0da-9ef7-4b98-9e55-5dbf66328ac9"
                        },
                        new
                        {
                            Id = "880b6aca-1521-4390-b173-3766bddbe9e6",
                            Name = "/api/v1/auth/refresh",
                            RequestTypeId = "1341b0da-9ef7-4b98-9e55-5dbf66328ac9"
                        },
                        new
                        {
                            Id = "f54f07c6-8f77-49e6-9d66-6c1d4526f155",
                            Name = "/api/v1/auth/revoke",
                            RequestTypeId = "4f9c19e3-7d52-4797-9ae6-9b1868373bdb"
                        },
                        new
                        {
                            Id = "11859f34-2741-4352-a476-7db0bfa5fc62",
                            Name = "/api/v1/auth/resetPassword",
                            RequestTypeId = "088ad7c5-0de4-416a-bc0f-5e9d6ba7d7ca"
                        },
                        new
                        {
                            Id = "f84b63e7-b787-44a2-a91c-9ac4e2c7806f",
                            Name = "/api/v1/auth/resetPassword",
                            RequestTypeId = "a3c92bad-3ab9-479a-bbbb-637a136e555f"
                        },
                        new
                        {
                            Id = "b91baa09-1eed-4e37-a8fc-c174b6a5b744",
                            Name = "/api/v1/auth/userInformation",
                            RequestTypeId = "088ad7c5-0de4-416a-bc0f-5e9d6ba7d7ca"
                        },
                        new
                        {
                            Id = "60a79e01-1ace-439d-899d-b7f75d14056d",
                            Name = "/api/v1/auth/allUserInformation",
                            RequestTypeId = "088ad7c5-0de4-416a-bc0f-5e9d6ba7d7ca"
                        });
                });

            modelBuilder.Entity("authentication.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtTokenId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("authentication.Models.RequestType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = "088ad7c5-0de4-416a-bc0f-5e9d6ba7d7ca",
                            TypeName = "GET"
                        },
                        new
                        {
                            Id = "1341b0da-9ef7-4b98-9e55-5dbf66328ac9",
                            TypeName = "POST"
                        },
                        new
                        {
                            Id = "a3c92bad-3ab9-479a-bbbb-637a136e555f",
                            TypeName = "PATCH"
                        },
                        new
                        {
                            Id = "4f9c19e3-7d52-4797-9ae6-9b1868373bdb",
                            TypeName = "DELETE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("authentication.Models.EndpointType", b =>
                {
                    b.HasOne("authentication.Models.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");
                });
#pragma warning restore 612, 618
        }
    }
}
