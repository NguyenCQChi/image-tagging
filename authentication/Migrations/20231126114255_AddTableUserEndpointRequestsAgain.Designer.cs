// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using authentication.Data;

#nullable disable

namespace authentication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231126114255_AddTableUserEndpointRequestsAgain")]
    partial class AddTableUserEndpointRequestsAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca6a6c9c-a603-4ea5-93bc-6640526491d0",
                            ConcurrencyStamp = "ca6a6c9c-a603-4ea5-93bc-6640526491d0",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "42c4acf1-bfa1-4549-bb9a-2836477373e9",
                            ConcurrencyStamp = "42c4acf1-bfa1-4549-bb9a-2836477373e9",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "72151f47-df50-4ddb-aee4-2be5dded36a6",
                            RoleId = "ca6a6c9c-a603-4ea5-93bc-6640526491d0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("authentication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "72151f47-df50-4ddb-aee4-2be5dded36a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad32e151-ac24-486f-a0ce-5ca898c52954",
                            Email = "mrandhawa40@my.bcit.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "MRANDHAWA40@MY.BCIT.CA",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEP08MIq7qfO9as5yKJsz9y6UQMmlRlpz8bMHiv/wGuXiHQrT+4kAdLiTC3Sb0p3BQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74f1d4b4-1e28-4169-b3e5-882d98940baa",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("authentication.Models.EndpointType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("RequestTypeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("EndpointTypes");

                    b.HasData(
                        new
                        {
                            Id = "75b1ca7d-5fbb-4e23-b3cb-3bed2a734ddc",
                            Name = "/api/v1/auth/register",
                            RequestTypeId = "edc3c314-7b15-4200-8717-d79686bcb8e1"
                        },
                        new
                        {
                            Id = "08da49c5-5d57-4fc3-8024-e0560c19fbf6",
                            Name = "/api/v1/auth/login",
                            RequestTypeId = "edc3c314-7b15-4200-8717-d79686bcb8e1"
                        },
                        new
                        {
                            Id = "4113a2c4-8cc4-450c-8169-d6620bdb954d",
                            Name = "/api/v1/auth/validate",
                            RequestTypeId = "edc3c314-7b15-4200-8717-d79686bcb8e1"
                        },
                        new
                        {
                            Id = "e6510111-de3f-4a6a-b38c-7aff501b1dea",
                            Name = "/api/v1/auth/refresh",
                            RequestTypeId = "edc3c314-7b15-4200-8717-d79686bcb8e1"
                        },
                        new
                        {
                            Id = "50cdfa01-339c-466b-94eb-bb52ce2233cb",
                            Name = "/api/v1/auth/revoke",
                            RequestTypeId = "9e4d9e5e-b0a1-442a-9396-62f90dfc20ed"
                        },
                        new
                        {
                            Id = "847d05af-f550-4428-b0c2-28aa5f43f7b1",
                            Name = "/api/v1/auth/resetPassword",
                            RequestTypeId = "3a41c695-a8ef-437c-843d-fca889ca275c"
                        },
                        new
                        {
                            Id = "3aa9d8b4-3841-4faa-ac38-23e5216e9c84",
                            Name = "/api/v1/auth/resetPassword",
                            RequestTypeId = "0964c943-ee5e-4cac-bc26-31d780ad2203"
                        },
                        new
                        {
                            Id = "4d74d91d-b12c-4f0d-84d0-3af146a4f48a",
                            Name = "/api/v1/auth/userInformation",
                            RequestTypeId = "3a41c695-a8ef-437c-843d-fca889ca275c"
                        },
                        new
                        {
                            Id = "fbe5fccd-ba35-4568-acc8-9cc3d053d827",
                            Name = "/api/v1/auth/allUserInformation",
                            RequestTypeId = "3a41c695-a8ef-437c-843d-fca889ca275c"
                        });
                });

            modelBuilder.Entity("authentication.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtTokenId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("authentication.Models.RequestType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = "3a41c695-a8ef-437c-843d-fca889ca275c",
                            TypeName = "GET"
                        },
                        new
                        {
                            Id = "edc3c314-7b15-4200-8717-d79686bcb8e1",
                            TypeName = "POST"
                        },
                        new
                        {
                            Id = "0964c943-ee5e-4cac-bc26-31d780ad2203",
                            TypeName = "PATCH"
                        },
                        new
                        {
                            Id = "9e4d9e5e-b0a1-442a-9396-62f90dfc20ed",
                            TypeName = "DELETE"
                        });
                });

            modelBuilder.Entity("authentication.Models.UserEndpointRequests", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(0);

                    b.Property<string>("EndpointTypeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<int>("NumRequests")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EndpointTypeId");

                    b.HasIndex("EndpointTypeId");

                    b.ToTable("UserEndpointRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("authentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("authentication.Models.EndpointType", b =>
                {
                    b.HasOne("authentication.Models.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("authentication.Models.UserEndpointRequests", b =>
                {
                    b.HasOne("authentication.Models.EndpointType", "EndpointType")
                        .WithMany()
                        .HasForeignKey("EndpointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("authentication.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndpointType");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
